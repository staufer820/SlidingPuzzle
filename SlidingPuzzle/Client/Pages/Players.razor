@page "/players"
@inject HttpClient Http
@using SlidingPuzzle.Shared
@using SlidingPuzzle.Client.Components
@using System.Reflection
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3>Players</h3>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
        <tr><th>AddGame</th><th>Email</th><th>Username</th><th colspan="2">PwHash</th></tr>
        </thead>
        <tbody>
        <DataRepeaterComponent Items="players">
            <Row Context="player">
                <tr>
                    <td>
                        <input type="text" class="form-control" value="@player.Email"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" value="@player.UserName" />
                    </td>
                    <td>
                        <input type="text" class="form-control" value="@player.PasswordHash"/>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="@(() => AddGame(player))">AddGame</button>
                    </td>
                </tr>
            </Row>
        </DataRepeaterComponent>
        </tbody>
    </table>
</div>

@if (playerGames == null)
{
    <p><em>Loading...</em></p>
}
<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
        <tr><th>Col 1</th><th>Col 2</th></tr>
        </thead>
        <tbody>
        <DataRepeaterComponent Items="playerGames">
            <Row Context="game">
                <tr>
                    <td>
                        <input type="text" class="form-control" readonly="readonly" value="@(game.Id)"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" readonly="readonly" value="@(game.TimePassed)"/>
                    </td>
                </tr>
            </Row>
        </DataRepeaterComponent>
        </tbody>
    </table>
</div>

Welcome to your new app.

<form>
    <input type="email" @bind-value="newPlayer.Email"/>
    <input type="text" @bind-value="newPlayer.UserName"/>
    <input type="text" @bind-value="newPlayer.PasswordHash"/>
</form>
<button class="btn btn-success" @onclick="Add">Add</button>

@code {
    

    private List<Player>? players;
    private Player newPlayer = new Player();
    private string filter;
    private List<PuzzlePiece>? puzzlePieces;
    private List<PlayerGame>? playerGames;
    
    protected override async Task OnInitializedAsync()
    {
        players = await Http.GetFromJsonAsync<List<Player>>("/api/Players");
        playerGames = await Http.GetFromJsonAsync<List<PlayerGame>>("api/Game");
    }

    
    private async Task Add()
    {
        using (var msg = await Http.PostAsJsonAsync<Player>("/api/Players", newPlayer, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                players.Add(await msg.Content.ReadFromJsonAsync<Player>());
                newPlayer.Email = newPlayer.UserName = newPlayer.PasswordHash = null;
            }
        }
    }
    
    private async Task AddGame(Player player)
    {
        var playerGame = new PlayerGame()
        {
            PuzzlePieces = new List<PuzzlePiece>()
            {
                new PuzzlePiece()
                {
                    StartX = 0,
                    StartY = 0,
                    X = 0,
                    Y = 0
                }
            }
        };
        player.PlayerGame = playerGame;
        using (var msg = await Http.PutAsJsonAsync<PlayerGame>($"/api/Players/{player.Id}", playerGame, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                playerGames.Add(await msg.Content.ReadFromJsonAsync<PlayerGame>());
            }
        }
    }
}
