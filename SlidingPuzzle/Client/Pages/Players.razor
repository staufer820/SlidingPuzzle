@page "/players"
@inject HttpClient Http
@using SlidingPuzzle.Shared
@using SlidingPuzzle.Client.Components
@using System.Reflection
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3>Players</h3>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
        <tr><th>name</th><th>address</th><th colspan="2">zip</th></tr>
        </thead>
        <tbody>
        <DataRepeaterComponent Items="players">
            <Row Context="player">
                <tr>
                    <td>
                        <input type="text" class="form-control" value="@player.Email" @onchange="@((ChangeEventArgs e) => Save(e, player, "Email"))" />
                    </td>
                    <td>
                        <input type="text" class="form-control" value="@player.UserName" @onchange="@((ChangeEventArgs e) => Save(e, player, "UserName"))" />
                    </td>
                    <td>
                        <input type="text" class="form-control" value="@player.PasswordHash" @onchange="@((ChangeEventArgs e) => Save(e, player, "PasswordHash"))" />
                    </td>
                </tr>
            </Row>
        </DataRepeaterComponent>
        </tbody>
    </table>
</div>

Welcome to your new app.

<form>
    <input type="email" @bind-value="newPlayer.Email"/>
    <input type="text" @bind-value="newPlayer.UserName"/>
    <input type="text" @bind-value="newPlayer.PasswordHash"/>
</form>
<button class="btn btn-success" @onclick="Add">Add</button>

@code {
    

    private List<Player>? players;
    private Player newPlayer = new Player();
    private string filter;
    
    protected override async Task OnInitializedAsync()
    {
        players = await Http.GetFromJsonAsync<List<Player>>("/api/Players");
    }

    
    private async Task Add()
    {
        using (var msg = await Http.PostAsJsonAsync<Player>("/api/Players", newPlayer, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                players.Add(await msg.Content.ReadFromJsonAsync<Player>());
                newPlayer.Email = newPlayer.UserName = newPlayer.PasswordHash = null;
            }
        }
    }
    
    private async Task AddPlayer()
    {
        await Http.PostAsJsonAsync<Player>("/api/Players", newPlayer);
    }
    
    private async Task Save(ChangeEventArgs e, Player player, string propField)
    {
        PropertyInfo pinfo = typeof(Player).GetProperty(propField);
        pinfo.SetValue(player, e.Value);

        using (var msg = await Http.PutAsJsonAsync<Player>($"/api/Players/{player.Id}", player, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
            }
            else
            {
                // DO SOMETHING
            }
        }
    }
}
